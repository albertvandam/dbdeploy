//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2016.04.12 at 07:50:56 PM CAT
//

package io.vandam.dbdeploy.databasestructure;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.*;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder = "tables")
@XmlRootElement
public class Database {
    @XmlElement(required = true, name = "table")
    private List<Table> tables;

    @XmlTransient
    private List<String> tableNames;

    private void initialiseTables() {
        if (null == tables) {
            tables = new ArrayList<>();
        }

        if (null == tableNames) {
            tableNames = new ArrayList<>();
        }

        if (tables.size() != tableNames.size()) {
            for (int i = 0; i < tables.size(); i++) {
                tableNames.add(i, tables.get(i).getSystemName());
            }
        }
    }

    /**
     * @return MyList of tables
     */
    public List<Table> getTables() {
        initialiseTables();

        return tables;
    }

    private Table getTableByName(final String name) {
    	if (null == name) {
    		return null;
    	}
    	
        if (null == tables) {
            System.out.println("Tables not initialised");
            return null;
        }

        if (tables.isEmpty()) {
            System.out.println("No tables in list");
            return null;
        }

        for (final Table table : tables) {
            if (name.equals(table.getName())) {
                return table;
            }
        }

        return null;
    }

    /**
     * Gets the tables.
     *
     * @param systemName the system name
     * @return the tables
     */
    public Table getTable(final String systemName) {
        initialiseTables();

        final int id = tableNames.indexOf(systemName);
        if (-1 == id) {
            return null;
        }

        return tables.get(id);
    }

    /**
     * Put tables.
     *
     * @param p_table the tables
     */
    public void putTable(final Table p_table) {
        initialiseTables();

        int id = tableNames.indexOf(p_table.getSystemName());
        if (-1 == id) {
            tableNames.add(p_table.getSystemName());
            id = tableNames.indexOf(p_table.getSystemName());
        }

        tables.add(id, p_table);
    }

    /**
     * From xml.
     *
     * @param filename the filename
     * @return the database
     * @throws JAXBException the JAXB exception
     */
    public static Database fromXml(final String filename) throws JAXBException {
        final File file = new File(filename);
        final JAXBContext jaxbContext = JAXBContext.newInstance(Database.class);

        final Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
        return (Database) jaxbUnmarshaller.unmarshal(file);
    }

    /**
     * To xml.
     *
     * @param filename the filename
     * @throws JAXBException the JAXB exception
     */
    public void toXml(final String filename) throws JAXBException {
        final File file = new File(filename);
        final JAXBContext jaxbContext = JAXBContext.newInstance(Database.class);
        final Marshaller jaxbMarshaller = jaxbContext.createMarshaller();

        // output pretty printed
        jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

        jaxbMarshaller.marshal(this, file);
    }

    @Override
    public boolean equals(final Object obj) {
        if ((null == obj) || (getClass() != obj.getClass())) {
            return false;
        }

        final Database database = (Database) obj;

        return (null != tables) ? tables.equals(database.tables) : (null == database.tables);

    }

    @Override
    public int hashCode() {
        return (null != tables) ? tables.hashCode() : 0;
    }

    private static final Map<String, List<String>> keyList = new HashMap<>();
    public static List<String> getPrimaryKey(final String tableName) throws Exception {
    	if (null == tableName) {
    		return null;
    	}
    	
        if (keyList.containsKey(tableName)) {
            return keyList.get(tableName);
        }

        final Database database = fromXml("conf/SOURCE.xml");

        final Table table = database.getTableByName(tableName);
        if (null == table) {
            return null;
        }

        final List<String> primaryKey = table.getPrimaryKey();
        if ((null == primaryKey) || primaryKey.isEmpty()) {
            return null;
        }

        keyList.put(tableName, primaryKey);

        return primaryKey;
    }
}
