//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2016.04.12 at 07:50:56 PM CAT
//

package io.vandam.dbdeploy.databasestructure;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "checkConstraint", propOrder = {"name", "check"})
public final class CheckConstraint {

    /**
     * The name.
     */
    @XmlElement(required = true)
    private String name;

    /**
     * The check.
     */
    @XmlElement(required = true)
    private String check;

    /**
     * Instantiates a new check constraint.
     */
    public CheckConstraint() {
        // left for JAXB
    }

    /**
     * Instantiates a new check constraint.
     *
     * @param p_name  the p_name
     * @param p_check the p_check
     * @throws InvalidLengthException the invalid length exception
     */
    public CheckConstraint(final String p_name, final String p_check) throws InvalidLengthException {
        setName(p_name);
        check = p_check;
    }

    /**
     * Gets the value of the name property.
     *
     * @return possible object is
     * {@link String }
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     *
     * @param value allowed object is
     *              {@link String }
     * @throws InvalidLengthException the invalid length exception
     */
    public void setName(final String value) throws InvalidLengthException {
        if ((1 > value.length()) || (50 < value.length())) {
            throw new InvalidLengthException("Name must be between 1 and 50 characters");
        }
        name = value;
    }

    /**
     * Gets the value of the check property.
     *
     * @return possible object is
     * {@link String }
     */
    public String getCheck() {
        return check;
    }

    /**
     * Sets the value of the check property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setCheck(final String value) {
        check = value;
    }

    /**
     * Equals.
     *
     * @param obj the other
     * @return true, if successful
     */
    @Override
    public boolean equals(final Object obj) {
        if (null == obj) {
            return false;
        }

        if (!CheckConstraint.class.equals(obj.getClass())) {
            return false;
        }

        final CheckConstraint other = (CheckConstraint) obj;

        boolean resp = (null == name) ? (null == other.name) : name.equals(other.name);
        resp &= (null == check) ? (null == other.check) : check.equals(other.check);
        return resp;
    }

    @Override
    public int hashCode() {
        int result = (null != name) ? name.hashCode() : 0;
        result = (31 * result) + ((null != check) ? check.hashCode() : 0);
        return result;
    }
}
